# 1 "./SampleLang/LanguageTemplate.ap"
# 1 "<command-line>"
# 1 "./SampleLang/LanguageTemplate.ap"
# 21 "./SampleLang/LanguageTemplate.ap"
# 1 "./SampleLang/Kernel.ap" 1
# 27 "./SampleLang/Kernel.ap"
system class Generic< Type T [...] > : extends Type {
@public:






   Generic( );

   Array<Type> get_types();
}
# 51 "./SampleLang/Kernel.ap"
system class Input< Type T, enum DataFlow( ASDF ), int64_t Count( 1 ) > {
@public:




   Input( );
# 66 "./SampleLang/Kernel.ap"
   bool HasType( Type type );

}







system class Output< Type T, enum DataFlow( ASDF ), int64_t Consume( -1 ) > {
@public:




   Output( );
# 91 "./SampleLang/Kernel.ap"
   bool HasType( Type type );
}






final system class Config< BasicType type >
{
@public:



   Config( );




   BasicType get_type();
}






abstract class Kernel {
# 138 "./SampleLang/Kernel.ap"
@public:

   void SetImplementations( String implementations[ ... ] )
   {
      foreach( String str : implementations ){
         impls.AddItem( str );
         ImplType type = AP.GetType( str );
         impl_types.AddItem( type );
      }
   }

@private:




   Array<String> impls;





   Array<AP.ImplType> impl_types;
}
# 22 "./SampleLang/LanguageTemplate.ap" 2
# 1 "./SampleLang/Thread.ap" 1
# 17 "./SampleLang/Thread.ap"
define abstract class Thread {
@public:
# 27 "./SampleLang/Thread.ap"
   bool AddKernel( Kernel kernel )
   {
      if( IsValidKernel( kernel ) ){
         kernels.add( kernel );
      }
   }



      1
   Array<Kernel> GetKernels( ){
      return( kernels );
   }







   abstract bool IsValidKernel( Kernel kernel );







   abstract bool AreThreadsCombinable( Thread other );
# 66 "./SampleLang/Thread.ap"
   abstract void CombineThread( Thread other );

@private:




   Array<Kernel> kernels;
};

define class MultiCoreThread : extends Thread {
@public:
   implements bool IsValidKernel( Kernel kernel ){

   }

   bool AreThreadsCombinable( Thread other )
   {
      if( other.class == CThread.class ){
         return( true );
      }else if( other.class == CPlusPlusThread.class ){
         return( true );
      }else {
         return( false );
      }
   }
   void CombineThreads( Thread other )
   {

   }

   int32_t GetAssignedCore()
   {
      return( assigned_core );
   }

   void SetAssignedCore( int32_t core );
   {
      assigned_core = core;
   }
@private:
   Array<Kernel> kernels;
   int32_t assigned_core;
};

define class x86Thread : extends MultiCoreThread {

};
# 23 "./SampleLang/LanguageTemplate.ap" 2
# 1 "./SampleLang/Process.ap" 1
# 25 "./SampleLang/Process.ap"
define interface ProcessInterface {
@public:
   bool IsProcessCombinable( ProcessInterface other );
# 36 "./SampleLang/Process.ap"
   void CombineProcess( ProcessInterface other );







   bool AddKernel( Kernel kernel );





   Array<Kernel> GetKernels( )
@protected:







   void set_impl( String implementation );





   String get_impl( );






};





define abstract class Process : implements ProcessInterface {
@public:

   autogen impl;
# 90 "./SampleLang/Process.ap"
   implements bool AddKernel( Kernel kernel )
   {
      if( IsValidKernel( kernel ) ){
         kernels.add( kernel );
      }
   }






   implements Array<Kernel> GetKernels( ){
      return( kernels );
   }
# 113 "./SampleLang/Process.ap"
   abstract bool IsValidKernel( Kernel kernel );
@private:




   String impl;



   Array<Kernel> kernels;
};






define class VHDLProcess : extends Process {
@public:




   VHDLProcess( ) : super.set_impl( VHDLProcess ) {};

   overrides bool IsValidKernel( Kernel kernel )
   {
      foreach( AP.ImplType type : kernel.get_impl_types ){
         if( AP.GetImplTypeFor( (this).class ) == type )
         {
            return( true );
         }
      }
      return( false );
   }

   implements bool IsProcessCombinable( ProcessInterface other )
   {
      if( other.class() == (this).class ){ return( true ); }
      return( false );
   }

   implements void CombineProcess( ProcessInterface other )
   {

      foreach( Kernel k : other.GetKernels() )
      {
         AddKernel( k );
      }
      other.destroy();
   }
};




define class CProcess : extends Process {
@public:





   CProcess( ) : super.set_impl( CProcess ),
                 cpu_affinity( 0 ){};

   overrides bool IsValidKernel( Kernel kernel )
   {
      foreach( AP.ImplType type : kernel.get_impl_types ){
         if( AP.GetImplTypeFor( (this).class ) == type )
         {
            return( true );
         }
      }
      return( false );
   }

   implements bool IsProcessCombinable( ProcessInterface other )
   {
      if( other.class() == (this).class ){ return( true ); }
      return( false );
   }

   implements void CombineProcess( ProcessInterface other )
   {

      foreach( Kernel k : other.GetKernels() )
      {
         AddKernel( k );
      }
      other.destroy();
   }


   autogen cpu_affinity;

@private:

   Array<Thread> threads;

   Array<int64_t> cpu_affinity;
};

define class CPlusPlusProcess : extends Process {
@public:
   CPlusPlusProcess( ) : super.set_impl( CPlusPlusProcess ),
                         cpu_affinity( 0 ){};

@private:
   int64_t cpu_affinity;
};
# 24 "./SampleLang/LanguageTemplate.ap" 2
# 1 "./SampleLang/Container.ap" 1
define interface Container<T>{
@public:
   void AddItem( T item );
   T DeleteItem( int64_t index );
   T GetItem( int64_t index );
};

define class Array<T> : implements Container<T> {
@public:
   Array( int64_t item_count = 10 ) : curr_size( 0 ),
                                      allocated_size( item_count )
   {

      the_array = new T[item_count];
   }

   implements void AddItem( T item )
   {
      if( curr_size == allocated_size )
      {
         T new_array = new T[ allocated_size * 2 ];
         for( int64_t i(0); i < curr_size; ++i )
         {
            new_array[i] = the_array[i];
         }
         the_array = new_array;
      }

   }

   implements T DeleteItem( int64_t index )
   {
      if( index > ( curr_size - 1 ) ){ return( NULL ); }
      T item = the_array[ index ];
      for( int64_t i( index ); i < ( curr_size - 1 ); ++i )
      {
         the_array[ index ] = the_array[ index + 1 ];
      }
      the_array[ curr_size - 1 ] = NULL;
      return( item );
   }

   implements T GetItem( int64_t index )
   {
      if( index > (curr_size - 1 ) ){ return( NULL ); }
      return( the_array[index] );
   }


@private:
   T the_array;
   int64_t curr_size;
   int64_t allocated_size;
};
# 25 "./SampleLang/LanguageTemplate.ap" 2
# 37 "./SampleLang/LanguageTemplate.ap"
class GenInt : extends Kernel{
@public:
   GenInt( int64_t seed ) : seed( seed )
   {
# 50 "./SampleLang/LanguageTemplate.ap"
      SetImplementations( "gen.c", "gen.vhd", "gen.cu" );
   }

@ports:
   Output< Generic( int32_t, int64_t ) > y0;

@configs:

   Config< int64_t > seed;
}

class Sum : extends Kernel{





@ports:
# 84 "./SampleLang/LanguageTemplate.ap"
   Input< Generic( int32_t, int64_t, float32_t ) > x0;




   Input< Generic( int32_t, int64_t, float32_t ) > x1;




   Output< Generic( int32_t, int64_t, float32_t ) > y0;
}

class Print : extends Kernel{
@public:





@ports:




   Input< Generic( int32_t, int64_t, float32_t ) > x0;
}

class SumApp{
@public
void main( String[] args )
{





   GenInt<int64_t> gen1, gen2;
   Sum sum;
   Print print;
   CPlusPlusProcess A;
   A.AddKernel( gen1, gen2, sum, print );
   AutoLink( gen1.y0, sum.x0 );
   AutoLink( gen2.y0, sum.x1 );
   AutoLink( sum.y0, print.x0 );
}
}

